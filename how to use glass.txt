           
                                             <<<<<<HOW TO USE GLASS.H>>>>>>

     
   Chapter # 1
                        
                        MAKING A MAIN WINDOW OUTSIDE A CONSOLE WINDOW.

   First of, you must know that a good old console cannot display cool graphics. To display
   graphics we have to create a window capable of doing that outside of console. Glass makes
   it an easier job for you to do.
   
   Take a look at ths piece of code.
   
   #include<glass.h>
   
   void main(int argc, char** argv)
   {
   MainWindow(argc,argv);
   }
    
   void myDisplayFunction()
   {
   ClearScreen();
   RefreshScreen();
   }

  Let us dissect this piece of code. 
  
  -> First the preprocesor includes glass.h liberary.
  -> Then, comes the main function with two very very unuasual argument i.e. argc and argv.
     These two argument are used to project a graphics screen from a console screen and they
     are mandtory to write as it is... You may think of them as a part of syntax in glass.h
  -> The MainWindow(...) function takes those to argument and creates a default screen of 
     400 x 400 pixels with a black background and 11ms RefreshRate.

WARNING: If you are running first time glass.h on your computer(visual studio 2013 or 2015)
... then you might encounter an error:-

  Error C2381 'exit': redefinition; __declspec(noreturn) differs ConsoleApplication14 
  c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdlib.h 50--
  
    TO RECTIFY this error, click on the error (in visul studio 2013 or 2015). Stdlib.h will open
    and a line will be selected in its code. Comment it out by (//) two forward slashes, the save 
    the update stdlib.h on desktop. The open the include folder where you have pasted glass.h. Then
    delete stdlib.h there and cut paste the updated stdlib in that include folder.And you are
    good to go.


>>>>>>>>void myDisplayFunction()
      
      This is the function (outside and must always be written below main) which will 
      display all of you graphics... It may be drawn shapes and images etc. You have to 
      write it as it is too... when ever you use glass.h. Otherwise the code will never
      works. 
     
      (((You don't have to call it explicitly in main for it is automatically called in the main
      Window function)))
      
It contains two function in it... which are also mandatory for you to write.

-> ClearScreen(): It clears the screen every time the myDisplayFunction is called it the mainWindow.
 
 <<<NOTE: myDisplayFunction is called repeatedly in mainWindow at a time acording to the 
 refresh rate of the mainWindow. By default the RefreshRate is 11ms. It means that 
 myDisplayFunction is called after ever 11ms.>>>  
        YOU CAN CONSIDER MYDISPLAYFUNCTION AS A NEVER ENDING BUT VERY USEFULL LOOP.
        YOU WILL HAVE TO WRITE WHATEVER CODE WHILE KEEPING THIS POINT INTO YOUR 
        CONSIDERATION.
        
        ALSO. LOOPS DON'T WORK IN MYDISPLAYFUNCTION... USE THEM OUT SIDE MYDISPLAYFUNCTION 

->  RefreshScreen():  This function swaps the buffers of the screen... don't dive deep into
    this thing just remember that with this code writen at the end nothing will be diplay. 
    
    
         ALL THE CODE THAT YOU WANT TO BE DISPLAYED ON SCREEN WILL BE WRITTEN BETWEEN 
         THESE TWO FUNCTIONS. 
  


>>>>>>>NAMING THE WINDOW.

    You can name the window like this:-
    
    Try this code:-
    
    #include<glass.h>
   
   void main(int argc, char** argv)
   {
        MainWindow(argc,argv, "WindowName");
   }
    
   void myDisplayFunction()
   {
   ClearScreen();
   RefreshScreen();
   } 
    
    ->For a window's name you will pass a string.
    ->By default the name of the window is "Glass".

>>>>>>>RESIZING THE WINDOW.
   
    You can resize the main window like this.
    
    #include<glass.h>
   
   void main(int argc, char** argv)
   {
    MainWindow(argc,argv, "WindowName", 500,500);  //first is height and then width
   }
    
   void myDisplayFunction()
   {
   ClearScreen();
   RefreshScreen();
   } 

   -> It only accepts integers 
   -> By Default, the height and width are 400px.
   -> All the measurements in glass are by pixels.

>>> Changing the background color:-

You can do this by:-
  #include<glass.h>
   
   void main(int argc, char** argv)
   {
        MainWindow(argc,argv, "WindowName", 500, 500, "Blue");
   }
    
   void myDisplayFunction()
   {
   ClearScreen();
   RefreshScreen();
   } 

   -> You pass a string with color name written.
   
>>> REPOSITIONING THE WINDOW:-

   You can reposition the window as:-
   #include<glass.h>
   
   void main(int argc, char** argv)
   {
        MainWindow(argc,argv, "WindowName", 500, 500,"Red", 0,0);
   }
    
   void myDisplayFunction()
   {
   ClearScreen();
   RefreshScreen();
   } 
   
-> By default they are 0 and it is recommended that you don't 
   change them unless you really mean it.
-> First you give x and then y coordinate... these are the 
   coordinates of the upper left corner of the Main Window.
   
   
>>> CHANGING THE REFRESH RATE:-

You call change the refresh rate by this:-
   
      void main(int argc, char** argv)
   {
        MainWindow(argc,argv, "WindowName", 500, 500,"White",0,0, 33);
   }
    
   void myDisplayFunction()
   {
   ClearScreen();
   RefreshScreen();
   } 
   
   -> By default it is 11ms and you should not 
      temper with it. 
  
  
  The entire MainWindow function:-
  
  MainWindow(int argc, char** argv, "Window's Name", int windowHeight, int windowWidth,
             "BackGround Color", int windowPosition_x, int windowPosition_y, int RefreshRate)
  
  You will be able to see this in intellisense... it is quit helpful.
  
  
 CHAPTER # 2:-
           
                 COLORS IN GLASS.H 
                 
        Right now the colors in it are as:-         
->	Black
->	Red
->	Blue
->	Green
->	White
->	Yellow
->	Purple
->	Cyan
->	Orange 
->      Grey
->      DarkGrey
->      LightGreen
->      DarkGreen
  
  
Chapter # 3:-  
  
                 DRAWING SIMPLE SHAPES IN GLASS.H
  
  You can drew shapes like Squares , circles , ellipse , triangle , rectangles and line in 
  glass.h by using some really simple command.
  
>>> RECTANGLE AND SQUARE:-

  You can write a Create command in between the ClearScreen and RefreshScreen functions 
  to make these shapes... 
  
  For rectangles and squares you write like this:-
  
  CreateRectangle(double x-coordinate, double y-coordinate, double height, double widht, "Color", "State");
   
  -> x-coordinate... is the x-coordinate of the upper left corner of the rectangle.
  -> y-coordinate... is the y-coordinate of the upper left corner of the rectangle.
  -> Other parameter are self-explainatory.
   
   #include<glass.h>
   void main(int argc, char** argv)
   {
        MainWindow(argc,argv, "WindowName", 500, 500,"White");
   }
    
   void myDisplayFunction()
   {
   ClearScreen();
   
   CreateRectangle(100.0,100.0,30.0,30.0,"Blue","Filled");
   /* This command will create a filled blue circle.*/
   RefreshScreen();
   }

>>  HOLLOW RECTANGLE:-  
  
  The command is :-
  CreateRectangle(double x-coordinate, double y-coordinate, double height, double widht, "Color",
                  "State", int LineThickness_evenNumbers);
   
 -> Everything is the same but an other parameter of line thickness is added
    it tell about the thickness of the boundary line of the hollow rectangle.
    
    Try this piece of code:-
   #include<glass.h>
   void main(int argc, char** argv)
   {
        MainWindow(argc,argv, "WindowName", 500, 500,"White");
   }
    
   void myDisplayFunction()
   {
   ClearScreen();
   
   CreateRectangle(100.0,100.0,30.0,30.0,"Blue","Hollow", 4);
   
   RefreshScreen();
   }

    BY DEFAULT LINE THICKNESS IS 1. You can also write as:-
    
    CreateRectangle(100.0,100.0,30.0,30.0,"Blue","Hollow");


>>>>> CIRCLES:-

  Ths Create commade for a circle is:-
   
  CreateCircle(double x-coordinate, double y-coordinate, double radius,"color","state",
               int LineThickness); 
  
 -> x-coordinate... is the x-coordinate of the origin of the circle.
 -> y-coordinate... is the y-coordinate of the origin of the circle.
 -> LineThickness... here it can be give as any positive integer. 
 
 Try this code:- 
#include<glass.h>
   void main(int argc, char** argv)
   {
        MainWindow(argc,argv, "WindowName");
   }
    
   void myDisplayFunction()
   {
   ClearScreen();
   CreateCircle(230.0,220.0,20,"Red","Filled");
   CreateRectangle(100.0,100.0,30.0,30.0,"Blue","Hollow", 4);
   CreateRectangle(100.0,200.0,40.0,30.0,"Orange");
   CreateCircle(300.0,300.0, 20.0,"White","Hollow");
   CreateCircle(100.0,300.0,24.0,"Blue","Hollow",5);
   RefreshScreen();
   }










                                   <<<<<<<<<<<<<<<<<<<<<<<<<<<<glass.h>>>>>>>>>>>>>>>>>>>>>>>>>>
Try every code like presented in the following example… you will grasp the basics of graphics and animation…
It is a derived from glut so it contains the powers of glut…. You may use the codes and functions of glut too.
How to start the coding is the first activation barrier in the field of programming…. 
For glass do something like this.

#include<glass.h>
void main(int argc, char** argv)
{
		mainWindow(argc, argv, 400, 500, "Red");
}
void myDisplayFunction()
{
ScreenClear(); 


refreshScreen();
}

(((NOTE: WHEN YOU WILL RUN THIS CODE AN ERROR MIGHT OCCUR  --Severity Code Description Project File Line
))))))))) 




Well what is (int argc and char** argv). For now just consider it to be a requirement of syntax. 
These are required to project a graphics window on the screen.

Now, as per common sense the mainWindow function generates the main Window for you graphics. 
You just write the argc and argv as it is… they are mandatory.
What is 400 and 500, well 400 is the height of window and and 500 is the width of window
and “Red”  this defines the color of window, background color I mean.











Now what the hell is void myDisplayFunction()

It is something mandatory, too. Is the function that is implicitly called by mainWindow function
from main so you don’t have to call in main. It is the function in which you entire code will be 
written and displayed on the graphic screen. 

Notice: the display function is just like a loop that repeats itself as long as you program runs
on the screen.It is called by the mainWindow  function 60times per second.  So
whatever logic you make for your code…. Keep this point in you mind.
You will write the body of your code in between the ScreenClear() function
and refreshScreen() function. They are mandatory too….. 


Here are the functions of glass till now… we will try to add more too. 
If you make some awesome to extend glass… feel free to add it to it with 
your name if you want.

>>Text (  x-coordinate, y-coordinate,  ”text string” , ”Color”, “Bold” )

Function is used to print text on screen. Takes 5 parameters . First 2 parameters are coordinates
are x and y coordinates of screen which will define the starting point of text, 
3 parameter is desired text , 4 parameter is color of text and 5 parameter is 
attribute to make text bold and it is not mandatory you can skip it as well. The code will be like.
The text string can be an int or a long but it cannot be float or double.
x-coordinate, y-coordinate are the coordinated of the lower left corner of the text block.





FOR EXAMPLE :

#include<glass.h>
void main(int argc, char** argv)
{
		mainWindow(argc, argv, 400, 500, "Black");
}
void myDisplayFunction()
{
	ScreenClear();

Text(100, 100, "HELLO! Its me", "White", "Bold");
	
	refreshScreen();
}

	
See here the code Text(…..) is written in between the ScreenClear() and refreshScreen() functions.


>>>CreateRectangle (x-coordinate, y-coordinate, height, length, ”color”, ”state”)

Function is used to create a rectangle on screen and takes 6 parameters .
First 2 parameters are x and y coordinates of starting point of rectangle
(you can use Pmotion_x as x coordinate and Pmotion_y as y coordinate to move rectangle with mouse pointer),
next 2 parameters are dimensions of rectangle. You can add color in as next parameter 
(list of colors will be given below) and last parameter can be used to mention state (Filled or Hollow).
Here the x-coordinate, y-coordinate, are of the upperleft corner of the rectangle 
FOR EXAMPLE : 

#include<glass.h>
void main(int argc, char** argv)
{
		mainWindow(argc, argv, 400, 500, "Yellow");
}
void myDisplayFunction()
{
	ScreenClear();
	CreateRectangle(200, 300, 50, 100, "Blue", "Filled");
	refreshScreen();
}
Try it on your visual studio…… make some changes to see what happen, but beware of the syntax.
Also try this code too…. See what will happen if you use two functions.

#include<glass.h>
void main(int argc, char** argv)
{
		mainWindow(argc, argv, 400, 500, "Yellow");
}
void myDisplayFunction()
{
	ScreenClear();
Text(100, 100, "HELLO! Its me", "White", "Bold");	
CreateRectangle(200, 300, 50, 100, "Blue", "Filled");
	refreshScreen();
}



>>>CreateCircle (x-coordinate, y-coordinate, radius, “Color”, “State”)

Function is used to create a circle on screen. First 2 parameters are x and y coordinate of center of 
circle and 3 parameter defines its radius.
Next parameter defines color (list of color is in the end) and 
last parameter is for state of circle( Filled or Hollow).
Here x and y coordinate are of the center of the circle.
FOR EXAMPLE : 
Try adding this code in the above code.
CreateCircle(150,150, 100, "Red", "Filled");

CreateCircle(150,150, 100, "Green", "Hollow");
 
_____________________________________________________________________________________


>>>CreateTriangle ( x1, y1, x2, y2, x3, y3, “color”, “state”)
Function is used to create a triangle and takes x and y coordinates of 3 vertices 
in first 6 parameters and next parameter defines color and last parameter is for state (Filled or Hollow).
x1, y1, x2, y2, x3, y3, the corrdinates of its three axes.   
Use you sense of geometry to figure out the orientation of your triangle.
FOR EXAMPLE :
CreateTriangle(50, 50, 100, 150, 300, 20, "Yellow", "Filled");




>>DrawLine (x1, y1, x2, y2, “color”)
Function is used to draw a line on screen and takes x and y coordinates of end points of
line as first 4 parameters and last parameter is to define color of line 
x1 and y1 are the coordinate of the first point of the line and the x2 and y2
are the coordinate of the final point of the line.

FOR EXAMPLE :
DrawLine(10, 30,90,120, "Yellow");




>>>LIST of COLORS:

The colors you can use in glass.h right now.
•	Black
•	Red
•	Blue
•	Green
•	White
•	Yellow
•	Purple
•	Cyan
•	Orange 

<<<<<<<<<<<<<<<<<<<<<<<<<Keyboard KEYS and Mouse Button>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Glass.h has made it easier to work with keyboard keys and mouse . 
Each key you enter will store in “Keyboard” variable (in case of shift, Alt, Ctrl, 
key is stored in “ModKey” and in case of function keys, arrow keys, other keys, 
key is stored in “SpeacialKey”)  . To perform any task you can simply use Name of Key
in quotation marks e.g ‘A’ in comparison with keyword “Keyboard” or “SpeacialKey” or “ModKey” ,
if same key on keyboard is pressed or released it will check and preform task if condition is true.  
>>SpeacialKeys:
  F1 ,   F2 ,    F3 ,    F4 ,  F5 ,  F6 ,  F7,  
  F8 , F9 ,  F10 ,  F11 ,  F12 ,   A_LEFT ,  A_RIGHT , 
  A_UP ,  A_DOWN , PAGE_UP, PAGE_DOWN , HOME , END , INSERT

>>ModKeys:
CONTROL ,  ALT ,  SHIFT

>>MOUSE:
mouse_x                   (for x coordinate of mouse pointer) 
mouse_y                  (for y coordinate of mouse pointer)
mouse_s                   (for state of mouse button, PRESSED/RELEASED)
mouse_b                   (for button of mouse , LEFT/RIGHT)

>>>>The movements in glass.h.

Try using the code.
#include<glass.h>

int x = 100, y = 100;              //global variables.

void main(int argc, char** argv)
{
		mainWindow(argc, argv, 400, 500, "Black");
}
void myDisplayFunction()
{
	ScreenClear();
	if (SpecialKey == A_UP)     //if the key UP is pressed then do.
		y -= 5;
	if (SpecialKey == A_DOWN)	//if the key DOWN is pressed then do.
		y += 5;
	if (SpecialKey == A_LEFT)	//if the key LEFT is pressed then do.
		x-= 5;
	if (SpecialKey == A_RIGHT) //if the key RIGHT is pressed then do.
		x += 5;

	SpecialKey = 0;                 //reinitiallization of special key.

	CreateCircle(x, y, 100, "Green", "Hollow");
	refreshScreen();
}
Run this code on your computer. Try pressing the arrow keys.
Try experimenting something:
>> try removing SpecialKey = 0, and see what will happen.
>> try removing ScreenClear() and see what will happen.
>>try removing both SpecialKey=0 and ScreenClear() at the same time and see what will happen. 


>>>>>>>>>>Try another code:
#include<glass.h>

int x = 100, y = 100;              //global variables.
int x1=200, y=200;         //global variables.
void main(int argc, char** argv)
{
		mainWindow(argc, argv, 400, 500, "Black");
}
void myDisplayFunction()
{
	ScreenClear();
	if (SpecialKey == A_UP)     //if the key UP is pressed then do.
		y -= 5;
	if (SpecialKey == A_DOWN)	//if the key DOWN is pressed then do.
		y += 5;
	if (SpecialKey == A_LEFT)	//if the key LEFT is pressed then do.
		x-= 5;
	if (SpecialKey == A_RIGHT) //if the key RIGHT is pressed then do.
		x += 5;

	SpecialKey = 0;                 //reinitiallization of special key.

	CreateCircle(x, y, 100, "Green", "Hollow");
	CreateRectangle(x1,y1,50,50, "Red", "Filled");	
    x1 += 1;
refreshScreen();
}
Try Experiment:
>> Try replacing x1 with y1
>> Try adding  y1+=1, below x1+=1;
>> Try changing the increment constant of x1 (x1+=5). 
>> try doing other experiments too.



>>>>>>>>>>>>>>>>>>>>>>>>>>>Try this code:

#include<glass.h>
void main(int argc, char** argv)
{
		mainWindow(argc, argv, 400, 500, "Black");
}
void myDisplayFunction()
{
	CreateCircle(Pmotion_x, Pmotion_x, 100, "Green", "Hollow");
	refreshScreen();
}

>>>>>Pmotion_x and Pmotion_y, are the built-in variables, they give the coordinate of 
the pointer of the mouse. Try moving your mouse cursor on your graphic screen.

>> try another code
#include<glass.h>
void main(int argc, char** argv)
{
		mainWindow(argc, argv, 400, 500, "Black");
}
void myDisplayFunction()
{
	CreateCircle(Amotion_x, Amotion_x, 100, "Green", "Hollow");
	refreshScreen();
}
>>>>Amotion_x and Amotion_y, are the built-in variables, they
give the coordinate of the pointer of the mouse. Try left
clicking on the figure you have created and while clicking move the pointer.

//<<<<<<<<<<<<<<<<<<<<<<<<<<<UPDATED FUNCTIONS>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//

The new functios include:-

1>> mainWindow(argc,argv,int height, int width, char* nameofwindow, char* backgroundColor)

Use this code.
#include<glass.h>
void main(int argc, char** argv)
{
    mainWindow(argc, argv,"NewWindowsName", 400, 500, "Red");
}

void myDisplayFunction()
{
ScreenClear(); 


RefreshScreen();
} 

- Try writing your name replacing NewWindowsName with your name (in a string) ad look at the upper
of the window. You will see your name.



<<2>> You can type on the windows screen in glass to. 

Use this function 

InputText(int x,int y, char* nameofstring, int sizeofstring, char* color)

Try using this code:
#include<glass.h>

char theString[20] = "";     //Defining the string(global) which can take the input from keyboard. 

void main(int argc, char** argv)
{
    mainWindow(argc, argv,"NewWindowsName", 400, 500, "Red");
}

void myDisplayFunction()
{
ScreenClear(); 

InputText(10,50,theString,20,"Blue");

RefreshScreen();
}

Experiment:-
> Try changing the size of the string and input it in the sizeofstring argument. 	
> Try changing the orientation of the text box by changing the x and y coordinates.
> Try changing the name of the string(the character array).


>>>>>>>>>>>YOU MAY ALSO CHANGE THE THICKNESS OF HOLLOW OBJECTS<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Try using this code:

#include<glass.h>

void main(int argc, char**argv)
{
	mainWindow(argc, argv,300, 300, "Red");
}
void myDisplayFunction()
{
	ScreenClear();
	CreateCircle(150.778, 100.34, 70.3, "Grey", "Hollow",10);
	CreateRectangle(100, 100, 40, 50, "Blue", "Hollow");
	CreateRectangle(200, 200, 40, 40, "Black", "Hollow",20);
	RefreshScreen();
}

The new functions are:
->CreateCircle(int x, int y,int radius, char* color,char*state,int LineThickness)
->CreateRectangle(int x,int y,int height, int widht, char*color, char*state, int LineThickness)

<<<<<YOU CANNOT DO THIS WITH TRIANGLES AND LINES (for now) >>>>>>>>>>>>>

>>>>>>> You can create ellipses.....

CreateEllipse(int origin_x,int origin_y,int max_height, int max_width, char* color, char*state)

Try using this code.

#include<glass.h>

void main(int argc, char**argv)
{
	mainWindow(argc, argv,300, 300, "Red");
}
void myDisplayFunction()
{
	ScreenClear();
	
	CreateEllipse(150, 150, 40, 80, "Yellow", "Filled");
	
	RefreshScreen();
}

or you may use:

#include<glass.h>

void main(int argc, char**argv)
{
	mainWindow(argc, argv,300, 300, "Red");
}
void myDisplayFunction()
{
	ScreenClear();
	
	CreateEllipse(150, 150, 40, 80, "Yellow", "Hollow");
	
	RefreshScreen();
}

You may also use this.... to widen the boundary of the ellipse.
?????CreateEllipse(int origin_x,int origin_y,int max_height, int max_width, char* color, char*state,int LineThickness)



#include<glass.h>

void main(int argc, char**argv)
{
	mainWindow(argc, argv,300, 300, "Red");
}
void myDisplayFunction()
{
	ScreenClear();
	
	CreateEllipse(150, 150, 40, 80, "Yellow", "Hollow",10);
	
	RefreshScreen();
}


